const multer = require('multer');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const XLSX = require('xlsx');
const pdfjsLib = require('pdfjs-dist/legacy/build/pdf.mjs');

// Configuraci√≥n de multer para Vercel
const upload = multer({
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 50 * 1024 * 1024 // 50MB
    }
});

// Configuraci√≥n de Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Funci√≥n mejorada para extraer texto de PDF usando pdfjs-dist
async function extractTextFromPDF(buffer) {
    try {
        console.log('üìÑ Iniciando extracci√≥n con pdfjs-dist...');
        
        // Configurar el worker de pdfjs-dist para Vercel
        const pdfjsWorker = require('pdfjs-dist/legacy/build/pdf.worker.mjs');
        pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;
        
        // Cargar el PDF
        const loadingTask = pdfjsLib.getDocument({
            data: new Uint8Array(buffer),
            disableFontFace: false,
            standardFontDataUrl: null
        });
        
        const pdf = await loadingTask.promise;
        const numPages = pdf.numPages;
        
        console.log(`üìÑ PDF cargado: ${numPages} p√°ginas detectadas`);
        
        // Limitar a 20 p√°ginas para evitar timeouts en Vercel
        const maxPages = Math.min(numPages, 20);
        console.log(`üìÑ Procesando ${maxPages} p√°ginas (limitado para Vercel)`);
        
        let extractedText = '';
        
        // Procesar p√°ginas secuencialmente para mejor control
        for (let pageNum = 1; pageNum <= maxPages; pageNum++) {
            try {
                console.log(`üìÑ Procesando p√°gina ${pageNum}/${maxPages}...`);
                const page = await pdf.getPage(pageNum);
                const textContent = await page.getTextContent();
                
                // Concatenar el texto de la p√°gina con mejor preservaci√≥n de estructura
                let pageText = '';
                
                // M√©todo mejorado para preservar l√≠neas
                const textItems = textContent.items.map(item => ({
                    text: item.str || '',
                    x: item.transform[4],
                    y: item.transform[5],
                    width: item.width || 0
                }));
                
                // Agrupar por posici√≥n Y (l√≠neas)
                const lineGroups = {};
                textItems.forEach(item => {
                    const yKey = Math.round(item.y * 100) / 100; // Redondear para agrupar l√≠neas similares
                    if (!lineGroups[yKey]) {
                        lineGroups[yKey] = [];
                    }
                    lineGroups[yKey].push(item);
                });
                
                // Ordenar l√≠neas por posici√≥n Y (de arriba a abajo)
                const sortedYKeys = Object.keys(lineGroups).sort((a, b) => parseFloat(b) - parseFloat(a));
                
                // Construir l√≠neas ordenadas por posici√≥n X dentro de cada l√≠nea
                const lines = [];
                sortedYKeys.forEach(yKey => {
                    const lineItems = lineGroups[yKey].sort((a, b) => a.x - b.x);
                    const lineText = lineItems.map(item => item.text).join(' ').trim();
                    
                    if (lineText.length > 0) {
                        lines.push(lineText);
                    }
                });
                
                pageText = lines.join('\n');
                extractedText += pageText + '\n';
                
                // Log de progreso cada 5 p√°ginas
                if (pageNum % 5 === 0) {
                    console.log(`üìÑ Progreso: ${pageNum}/${maxPages} p√°ginas procesadas`);
                }
                
            } catch (pageError) {
                console.log(`‚ö†Ô∏è Error en p√°gina ${pageNum}: ${pageError.message}`);
                continue;
            }
        }
        
        console.log(`üìÑ Extracci√≥n completada: ${extractedText.length} caracteres`);
        return extractedText;
        
    } catch (error) {
        console.error('‚ùå Error con pdfjs-dist:', error.message);
        
        // Fallback a pdf-parse si pdfjs-dist falla
        try {
            console.log('üîÑ Intentando fallback con pdf-parse...');
            const pdfParse = require('pdf-parse');
            const pdfData = await pdfParse(buffer);
            console.log(`üìÑ Fallback exitoso: ${pdfData.text.length} caracteres`);
            return pdfData.text;
        } catch (fallbackError) {
            console.error('‚ùå Error en fallback:', fallbackError.message);
            throw new Error('No se pudo extraer texto del PDF');
        }
    }
}

// Funci√≥n mejorada para validar cantidades
function validateQuantity(quantity, context = '') {
    try {
        // Limpiar la cantidad
        const cleanQuantity = quantity.toString().trim();
        
        // Extraer solo n√∫meros
        const numericMatch = cleanQuantity.match(/(\d+)/);
        if (!numericMatch) {
            console.log(`‚ö†Ô∏è Cantidad inv√°lida (sin n√∫meros): "${quantity}"`);
            return null;
        }
        
        const numericValue = parseInt(numericMatch[1]);
        
        // Validaciones
        if (numericValue <= 0) {
            console.log(`‚ö†Ô∏è Cantidad inv√°lida (‚â§ 0): "${quantity}"`);
            return null;
        }
        
        if (numericValue > 99999) {
            console.log(`‚ö†Ô∏è Cantidad sospechosa (muy alta): "${quantity}"`);
            return null;
        }
        
        // Verificar contexto si est√° disponible
        if (context) {
            const contextLower = context.toLowerCase();
            
            // Si el contexto sugiere que es una cantidad v√°lida
            if (contextLower.includes('und') || 
                contextLower.includes('unidades') || 
                contextLower.includes('pcs') || 
                contextLower.includes('piezas') ||
                contextLower.includes('cantidad')) {
                console.log(`‚úÖ Cantidad validada con contexto: "${quantity}" -> ${numericValue}`);
                return numericValue.toString();
            }
        }
        
        // Si no hay contexto, ser m√°s estricto
        if (numericValue >= 1 && numericValue <= 9999) {
            console.log(`‚úÖ Cantidad validada: "${quantity}" -> ${numericValue}`);
            return numericValue.toString();
        }
        
        console.log(`‚ö†Ô∏è Cantidad fuera de rango razonable: "${quantity}"`);
        return null;
        
    } catch (error) {
        console.log(`‚ùå Error validando cantidad "${quantity}":`, error.message);
        return null;
    }
}

// Funci√≥n de extracci√≥n con IA
async function extractWithAI(text, requestedFields) {
    try {
        console.log('ü§ñ Iniciando extracci√≥n con Gemini Flash...');
        console.log('üìã Campos solicitados:', requestedFields);
        console.log('üìÑ Longitud del texto:', text.length);

        // Optimizaci√≥n: Limitar el tama√±o del texto para mejor rendimiento (igual que local)
        const maxTextLength = 100000; // 100KB m√°ximo (aumentado para archivos m√°s grandes)
        if (text.length > maxTextLength) {
            console.log(`‚ö†Ô∏è Texto muy largo (${text.length} chars). Truncando a ${maxTextLength} chars para mejor rendimiento...`);
            text = text.substring(0, maxTextLength);
        }

        const model = genAI.getGenerativeModel({ 
            model: "gemini-2.0-flash",
            generationConfig: {
                temperature: 0.1, // M√°s determin√≠stico para mejor rendimiento
                maxOutputTokens: 8000 // Aumentado para documentos m√°s grandes
            }
        });

        // Funci√≥n para reconstruir l√≠neas si el texto est√° fusionado
        function reconstructLines(text) {
            const lines = text.split(/\r?\n/).filter(line => line.trim().length > 0);
            
            // Si hay pocas l√≠neas, intentar reconstruir bas√°ndose en patrones
            if (lines.length < 5) {
                console.log('‚ö†Ô∏è Pocas l√≠neas detectadas, intentando reconstruir...');
                
                // Buscar patrones de inicio de l√≠nea
                const lineStartPattern = /(CG-\d+)/g;
                const matches = [...text.matchAll(lineStartPattern)];
                
                if (matches.length > 0) {
                    const reconstructedLines = [];
                    for (let i = 0; i < matches.length; i++) {
                        const startIndex = matches[i].index;
                        const endIndex = i < matches.length - 1 ? matches[i + 1].index : text.length;
                        const line = text.substring(startIndex, endIndex).trim();
                        
                        if (line.length > 10) {
                            reconstructedLines.push(line);
                        }
                    }
                    
                    if (reconstructedLines.length > 0) {
                        console.log(`‚úÖ Reconstruidas ${reconstructedLines.length} l√≠neas`);
                        return reconstructedLines;
                    }
                }
            }
            
            return lines;
        }
        
        // Procesar el texto l√≠nea por l√≠nea antes de enviarlo a Gemini
        const lines = reconstructLines(text);
        console.log(`üìÑ Procesando ${lines.length} l√≠neas para Gemini`);
        
        // Filtrar solo l√≠neas relevantes que contengan informaci√≥n de art√≠culos
        const relevantLines = lines.filter(line => 
            line.includes('TUBOS PVC') || 
            line.includes('CORVI-SONACA') || 
            line.includes('CPOV-') || 
            line.includes('CG-')
        );
        
        console.log(`üìÑ L√≠neas relevantes encontradas: ${relevantLines.length}`);
        
        // Log de las l√≠neas relevantes para debugging
        console.log('üìÑ L√≠neas relevantes:');
        relevantLines.forEach((line, index) => {
            console.log(`${index + 1}. ${line}`);
        });
        
        // Crear un prompt m√°s espec√≠fico con instrucciones claras
        const prompt = `Extrae los siguientes campos del documento, procesando CADA L√çNEA POR SEPARADO:

- ID de carga (formato: CG-XXXXXXX)
- N√∫mero de orden (formato: CPOV-XXXXXXXXX)
- Nombre de art√≠culo (debe contener "TUBOS PVC" y "CORVI-SONACA")
- Cantidad (solo n√∫meros que est√©n en la MISMA L√çNEA que el art√≠culo, seguidos de "UND")

IMPORTANTE:
1. Procesa cada l√≠nea individualmente
2. La cantidad debe estar en la MISMA L√çNEA que el nombre del art√≠culo
3. NO mezcles cantidades de l√≠neas diferentes
4. Solo considera cantidades que est√©n claramente asociadas al art√≠culo en esa l√≠nea espec√≠fica
5. Si una l√≠nea no tiene cantidad clara, om√≠tela

Documento (cada l√≠nea separada):
${relevantLines.map((line, index) => `L√≠nea ${index + 1}: ${line}`).join('\n')}

Responde SOLO con un JSON en este formato:
{"campos": [{"nombre": "campo", "valor": "valor", "linea": numero_linea}]}`;

        console.log('ü§ñ Enviando prompt a Gemini...');
        console.log('üìù Prompt enviado (primeros 500 chars):', prompt.substring(0, 500));
        const startTime = Date.now();
        
        let aiResponse;
        try {
            const result = await model.generateContent(prompt);
            const endTime = Date.now();
            console.log(`‚ö° Gemini respondi√≥ en ${endTime - startTime}ms`);
            const response = await result.response;
            aiResponse = response.text();
            console.log('ü§ñ Respuesta de Gemini (primeros 500 chars):', aiResponse.substring(0, 500));
        } catch (geminiError) {
            console.error('‚ùå Error en Gemini:', geminiError.message);
            console.log('üîÑ Usando extracci√≥n manual como fallback...');
            return extractFieldsManually(text, requestedFields);
        }

        console.log('ü§ñ Respuesta de Gemini recibida (longitud:', aiResponse.length, 'chars)');

        // Limpiar la respuesta de Gemini
        let cleanResponse = aiResponse;
        if (aiResponse.includes('```json')) {
            cleanResponse = aiResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '');
        }

        // Intentar parsear la respuesta JSON
        try {
            const firstBrace = cleanResponse.indexOf('{');
            const lastBrace = cleanResponse.lastIndexOf('}');
            
            if (firstBrace !== -1 && lastBrace !== -1) {
                const jsonString = cleanResponse.substring(firstBrace, lastBrace + 1);
                const parsedData = JSON.parse(jsonString);
                
                if (parsedData.campos && Array.isArray(parsedData.campos)) {
                    console.log(`‚úÖ Gemini extrajo ${parsedData.campos.length} campos`);
                    
                    // Validar y limpiar los campos extra√≠dos
                    const validatedFields = [];
                    const seenCombinations = new Set();
                    
                    parsedData.campos.forEach(field => {
                        const fieldName = field.nombre || field.label || '';
                        const fieldValue = field.valor || field.value || '';
                        const lineNumber = field.linea || field.line || 0;
                        
                        // Validar que el campo tenga valor
                        if (!fieldValue || fieldValue.trim() === '') {
                            console.log(`‚ö†Ô∏è Campo vac√≠o ignorado: ${fieldName}`);
                            return;
                        }
                        
                        // Para cantidades, aplicar validaciones adicionales
                        if (fieldName.toLowerCase().includes('cantidad')) {
                            const numericMatch = fieldValue.match(/(\d+)/);
                            if (!numericMatch) {
                                console.log(`‚ö†Ô∏è Cantidad inv√°lida ignorada: ${fieldValue}`);
                                return;
                            }
                            
                            const numericValue = parseInt(numericMatch[1]);
                            
                            // Validar que la cantidad sea razonable
                            if (numericValue <= 0 || numericValue > 99999) {
                                console.log(`‚ö†Ô∏è Cantidad fuera de rango ignorada: ${fieldValue}`);
                                return;
                            }
                            
                            // Verificar que no sea parte de un n√∫mero de orden
                            if (numericValue > 500) {
                                const originalLine = relevantLines[lineNumber - 1] || '';
                                if (originalLine.includes('CPOV-')) {
                                    const orderMatch = originalLine.match(/CPOV-(\d+)/);
                                    if (orderMatch && orderMatch[1].includes(numericValue.toString())) {
                                        console.log(`‚ö†Ô∏è Cantidad parece ser n√∫mero de orden ignorada: ${fieldValue}`);
                                        return;
                                    }
                                }
                            }
                        }
                        
                        // Evitar duplicados bas√°ndose en nombre y valor
                        const combination = `${fieldName}:${fieldValue}`;
                        if (seenCombinations.has(combination)) {
                            console.log(`‚ö†Ô∏è Campo duplicado ignorado: ${fieldName} = ${fieldValue}`);
                            return;
                        }
                        seenCombinations.add(combination);
                        
                        validatedFields.push({
                            nombre: fieldName,
                            valor: fieldValue,
                            linea: lineNumber
                        });
                        
                        console.log(`‚úÖ Campo validado: ${fieldName} = ${fieldValue} (l√≠nea ${lineNumber})`);
                    });
                    
                    console.log(`üìä Total de campos validados: ${validatedFields.length}`);
                    return validatedFields;
                } else {
                    console.log('‚ö†Ô∏è Respuesta de Gemini no tiene el formato esperado');
                    return [];
                }
            } else {
                console.log('‚ö†Ô∏è No se encontr√≥ JSON v√°lido en la respuesta');
                return [];
            }
        } catch (parseError) {
            console.log('‚ö†Ô∏è Error parseando JSON de Gemini:', parseError.message);
            return [];
        }
    } catch (error) {
        console.error('‚ùå Error en extracci√≥n con IA:', error);
        return [];
    }
}

// Funci√≥n de extracci√≥n manual (fallback)
function extractFieldsManually(text, requestedFields) {
    console.log('üîç Iniciando extracci√≥n manual...');
    console.log('üìÑ Longitud del texto a procesar:', text.length);
    console.log('üìã Campos solicitados:', requestedFields);
    const results = [];

    requestedFields.forEach(field => {
        const fieldLower = field.toLowerCase();
        
        if (fieldLower.includes('orden') || fieldLower.includes('order')) {
            const orderPatterns = [
                /CPOV-\d+/gi,
                /(?:N√∫mero de orden|Order):\s*([A-Z0-9\-]+)/gi
            ];
            
            const seenOrderNumbers = new Set();
            
            orderPatterns.forEach(pattern => {
                const matches = text.match(pattern);
                if (matches) {
                    matches.forEach(match => {
                        const cleanMatch = match.trim();
                        if (!seenOrderNumbers.has(cleanMatch)) {
                            seenOrderNumbers.add(cleanMatch);
                            results.push({ nombre: field, valor: cleanMatch });
                            console.log(`‚úÖ Encontrado orden √∫nico: ${cleanMatch}`);
                        }
                    });
                }
            });
        } else if (fieldLower.includes('carga') || fieldLower.includes('load')) {
            const loadPatterns = [
                /CG-\d+/gi,
                /(?:ID de carga|Load ID):\s*([A-Z0-9\-]+)/gi
            ];
            
            loadPatterns.forEach(pattern => {
                const matches = text.match(pattern);
                if (matches) {
                    matches.forEach(match => {
                        results.push({ nombre: field, valor: match.trim() });
                        console.log(`‚úÖ Encontrado ID de carga: ${match.trim()}`);
                    });
                }
            });
        } else if (fieldLower.includes('art√≠culo') || fieldLower.includes('article')) {
            const articlePatterns = [
                /([A-Z\s\d\/\"\-\'\.]+(?:SONACA|CORVI)[A-Z\s\d\/\"\-\'\.]*)/gi,
                /(?:Nombre de art√≠culo|Article Name):\s*([^\n]+)/gi
            ];
            
            articlePatterns.forEach(pattern => {
                const matches = text.match(pattern);
                if (matches) {
                    matches.forEach(match => {
                        const cleanMatch = match.trim();
                        if (cleanMatch.length > 5) {
                            results.push({ nombre: field, valor: cleanMatch });
                            console.log(`‚úÖ Encontrado nombre de art√≠culo: ${cleanMatch}`);
                        }
                    });
                }
            });
        } else if (fieldLower.includes('cantidad')) {
            console.log('üîç Iniciando b√∫squeda de cantidades con procesamiento l√≠nea por l√≠nea...');
            
            // Procesar el texto l√≠nea por l√≠nea para evitar fusiones
            const lines = text.split(/\r?\n/).filter(line => line.trim().length > 0);
            console.log(`üìÑ Procesando ${lines.length} l√≠neas del documento`);
            
            const foundQuantities = new Set(); // Evitar duplicados
            const quantityResults = [];
            
            // Patr√≥n espec√≠fico para cantidades con word boundaries
            const quantityPattern = /\b(\d{1,4})\s*UND\b/gi;
            
            lines.forEach((line, lineIndex) => {
                // Solo procesar l√≠neas que contengan "TUBOS PVC" para asegurar contexto correcto
                if (line.includes('TUBOS PVC') || line.includes('CORVI-SONACA')) {
                    console.log(`üîç Procesando l√≠nea ${lineIndex + 1}: "${line.trim()}"`);
                    
                    // Buscar cantidades en esta l√≠nea espec√≠fica
                    const matches = line.match(quantityPattern);
                    if (matches) {
                        console.log(`‚úÖ L√≠nea ${lineIndex + 1} - Cantidades encontradas:`, matches);
                        
                        matches.forEach(match => {
                            // Extraer solo el n√∫mero del match
                            const numericMatch = match.match(/(\d+)/);
                            if (numericMatch) {
                                const quantity = numericMatch[1];
                                const numericValue = parseInt(quantity);
                                
                                // Validaci√≥n cruzada para evitar confundir n√∫mero de orden con cantidad
                                if (numericValue > 500) {
                                    // Verificar que no sea un n√∫mero de orden (CPOV-)
                                    if (line.includes('CPOV-')) {
                                        const orderMatch = line.match(/CPOV-(\d+)/);
                                        if (orderMatch && orderMatch[1].includes(quantity)) {
                                            console.log(`‚ö†Ô∏è Cantidad rechazada (parece ser n√∫mero de orden): "${quantity}" en l√≠nea ${lineIndex + 1}`);
                                            return;
                                        }
                                    }
                                    
                                    // Verificar que est√© claramente junto al nombre del art√≠culo
                                    const articleContext = line.includes('CORVI-SONACA') || line.includes('TUBOS PVC');
                                    if (!articleContext) {
                                        console.log(`‚ö†Ô∏è Cantidad rechazada (sin contexto de art√≠culo): "${quantity}" en l√≠nea ${lineIndex + 1}`);
                                        return;
                                    }
                                }
                                
                                // Validaci√≥n adicional: verificar que no est√© en el contexto de un n√∫mero de orden
                                const beforeQuantity = line.substring(0, line.indexOf(match));
                                const afterQuantity = line.substring(line.indexOf(match) + match.length);
                                
                                // Si hay un CPOV- cerca, verificar que no sea parte del n√∫mero de orden
                                if (beforeQuantity.includes('CPOV-')) {
                                    const orderInBefore = beforeQuantity.match(/CPOV-(\d+)/);
                                    if (orderInBefore && orderInBefore[1].endsWith(quantity)) {
                                        console.log(`‚ö†Ô∏è Cantidad rechazada (parte de n√∫mero de orden): "${quantity}" en l√≠nea ${lineIndex + 1}`);
                                        return;
                                    }
                                }
                                
                                // Validar la cantidad con contexto completo de la l√≠nea
                                const validatedQuantity = validateQuantity(quantity, line);
                                
                                if (validatedQuantity && !foundQuantities.has(validatedQuantity)) {
                                    foundQuantities.add(validatedQuantity);
                                    quantityResults.push({ 
                                        nombre: field, 
                                        valor: validatedQuantity,
                                        context: line.trim(),
                                        lineNumber: lineIndex + 1
                                    });
                                    console.log(`‚úÖ Cantidad agregada: "${validatedQuantity}" (l√≠nea ${lineIndex + 1})`);
                                    console.log(`üìÑ Contexto completo: "${line.trim()}"`);
                                } else if (!validatedQuantity) {
                                    console.log(`‚ö†Ô∏è Cantidad rechazada por validaci√≥n: "${quantity}" en l√≠nea ${lineIndex + 1}`);
                                } else {
                                    console.log(`‚ö†Ô∏è Cantidad duplicada: "${quantity}" en l√≠nea ${lineIndex + 1}`);
                                }
                            }
                        });
                    } else {
                        console.log(`‚ùå L√≠nea ${lineIndex + 1} - No se encontraron cantidades`);
                    }
                } else {
                    console.log(`‚è≠Ô∏è L√≠nea ${lineIndex + 1} - Saltada (sin contexto de TUBOS PVC)`);
                }
            });
            
            // Agregar las cantidades v√°lidas a los resultados
            results.push(...quantityResults);
            
            // Log final de cantidades encontradas
            console.log(`üìä Total de cantidades √∫nicas encontradas: ${foundQuantities.size}`);
            console.log(`üìã Cantidades:`, Array.from(foundQuantities).sort((a, b) => parseInt(a) - parseInt(b)));
            
            // Log detallado de cada cantidad encontrada
            console.log('üìã Detalles de cantidades encontradas:');
            quantityResults.forEach((result, index) => {
                console.log(`${index + 1}. Cantidad: "${result.valor}" (l√≠nea ${result.lineNumber})`);
                console.log(`   Contexto: "${result.context}"`);
            });
        }
    });

    console.log(`üìä Total de campos encontrados manualmente: ${results.length}`);
                    console.log('üìã Resultados finales de extracci√≥n manual:', results);
                return results;
}

// Funci√≥n para generar Excel
function generateExcel(structuredData) {
    console.log('üìä Generando Excel con', structuredData.length, 'campos extra√≠dos...');
    
    const workbook = XLSX.utils.book_new();
    const allData = [];

    // Crear encabezados
    const headers = ['ID de carga', 'N√∫mero de orden', 'Nombre de art√≠culo', 'Cantidad'];
    allData.push(headers);

    // Agrupar datos por categor√≠a
    const groupedData = {};
    structuredData.forEach(item => {
        const category = item.label || item.nombre;
        if (!groupedData[category]) {
            groupedData[category] = [];
        }
        groupedData[category].push(item.value || item.valor);
    });

    // Obtener ID de carga (siempre el primero)
    const loadIds = groupedData['ID de carga'] || [];
    const loadId = loadIds.length > 0 ? loadIds[0] : '';

    // Obtener todos los n√∫meros de orden √∫nicos
    const orderNumbers = groupedData['N√∫mero de orden'] || [];
    const uniqueOrders = [...new Set(orderNumbers)];

    // Obtener todos los nombres de art√≠culos
    const articleNames = groupedData['Nombre de art√≠culo'] || [];

    // Obtener todas las cantidades
    const quantities = groupedData['Cantidad'] || [];

    // Crear registros combinando los datos
    // Procesar datos para crear registros usando la l√≥gica del servidor local
    const records = [];
    
    if (structuredData && structuredData.length > 0) {
        // Procesar los datos secuencialmente para mantener las relaciones exactas
        let currentOrder = '';
        let currentArticleName = '';
        let currentQuantities = [];
        
        for (let i = 0; i < structuredData.length; i++) {
            const item = structuredData[i];
            const label = item.label || item.nombre || '';
            const value = item.value || item.valor || '';
            
            if (label.toLowerCase().includes('n√∫mero de orden') || label.toLowerCase().includes('numero de orden') || label.toLowerCase().includes('order number')) {
                // Si tenemos datos acumulados, crear registros
                if (currentOrder && currentArticleName) {
                    if (currentQuantities.length === 0) {
                        records.push({
                            loadId: loadId,
                            orderNumber: currentOrder,
                            articleName: currentArticleName,
                            quantity: ''
                        });
                    } else {
                        // Crear un registro por cada cantidad
                        for (const quantity of currentQuantities) {
                            console.log(`üìù Creando registro: Orden=${currentOrder}, Art√≠culo=${currentArticleName}, Cantidad="${quantity}"`);
                            records.push({
                                loadId: loadId,
                                orderNumber: currentOrder,
                                articleName: currentArticleName,
                                quantity: quantity
                            });
                        }
                    }
                }
                
                // Iniciar nuevo registro
                currentOrder = value;
                currentArticleName = '';
                currentQuantities = [];
                
            } else if (label.toLowerCase().includes('nombre de art√≠culo') || label.toLowerCase().includes('nombre de articulo') || label.toLowerCase().includes('article name')) {
                currentArticleName = value;
            } else if (label.toLowerCase().includes('cantidad')) {
                console.log(`üì¶ Agregando cantidad: "${value}" para orden: ${currentOrder}`);
                currentQuantities.push(value);
            }
        }
        
        // Procesar el √∫ltimo registro
        if (currentOrder && currentArticleName) {
            if (currentQuantities.length === 0) {
                records.push({
                    loadId: loadId,
                    orderNumber: currentOrder,
                    articleName: currentArticleName,
                    quantity: ''
                });
            } else {
                // Crear un registro por cada cantidad
                for (const quantity of currentQuantities) {
                    records.push({
                        loadId: loadId,
                        orderNumber: currentOrder,
                        articleName: currentArticleName,
                        quantity: quantity
                    });
                }
            }
        }
    }
    
    // Si no hay registros con la l√≥gica secuencial, usar fallback
    if (records.length === 0) {
        console.log('‚ö†Ô∏è Usando l√≥gica de fallback para crear registros...');
        const seenCombinations = new Set();
        
        for (let i = 0; i < orderNumbers.length; i++) {
            const orderNumber = orderNumbers[i];
            const articleName = articleNames[i] || '';
            const quantity = quantities[i] || '';
            
            const combination = `${orderNumber}|${articleName}`;
            
            if (!seenCombinations.has(combination) && articleName) {
                seenCombinations.add(combination);
                records.push({
                    loadId: loadId,
                    orderNumber: orderNumber,
                    articleName: articleName,
                    quantity: quantity
                });
            }
        }
    }

    console.log('üìä Registros agrupados:', records.length, 'registros creados');

    // Crear filas de datos
    records.forEach(record => {
        const row = [
            record.loadId,
            record.orderNumber,
            record.articleName,
            record.quantity
        ];
        allData.push(row);
    });

    console.log('üìä Tabla final:', allData.length, 'filas generadas');

    const mainWorksheet = XLSX.utils.aoa_to_sheet(allData);

    // Aplicar estilos b√°sicos
    mainWorksheet['!cols'] = [
        { width: 20 },  // ID de carga
        { width: 25 },  // N√∫mero de orden
        { width: 50 },  // Nombre de art√≠culo
        { width: 15 }   // Cantidad
    ];

    XLSX.utils.book_append_sheet(workbook, mainWorksheet, 'Datos Extra√≠dos');

    return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });
}

// Funci√≥n principal de la API para Vercel
module.exports = async (req, res) => {
    // Configurar CORS m√°s permisivo
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    res.setHeader('Access-Control-Max-Age', '86400');

    // Manejar preflight requests
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }

    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    // Agregar headers adicionales para mejor compatibilidad
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('X-Vercel-Cache-Bypass', 'true');
    res.setHeader('X-Deploy-Timestamp', Date.now().toString());

    try {
        // Verificar API key con mejor manejo de errores
        if (!process.env.GEMINI_API_KEY) {
            console.error('‚ùå API Key de Gemini no configurada en variables de entorno');
            return res.status(500).json({
                success: false,
                error: 'Error de configuraci√≥n del servidor. Contacta al administrador.'
            });
        }

        // Verificar que la API key sea v√°lida
        if (process.env.GEMINI_API_KEY === 'tu_api_key_de_gemini_aqui') {
            console.error('‚ùå API Key de Gemini no ha sido configurada correctamente');
            return res.status(500).json({
                success: false,
                error: 'Error de configuraci√≥n del servidor. Contacta al administrador.'
            });
        }

        // Procesar archivos usando multer
        upload.array('files')(req, res, async (err) => {
            if (err) {
                console.error('‚ùå Error en multer:', err);
                return res.status(400).json({
                    success: false,
                    error: 'Error procesando archivos'
                });
            }

            try {
                console.log('üì• Petici√≥n recibida:', {
                    method: req.method,
                    headers: req.headers,
                    bodyKeys: Object.keys(req.body || {}),
                    filesCount: req.files ? req.files.length : 0
                });

                const files = req.files || [];
                if (files.length === 0) {
                    console.error('‚ùå No se subieron archivos');
                    return res.status(400).json({
                        success: false,
                        error: 'No se subieron archivos'
                    });
                }

                const requestedFields = req.body.fields ? JSON.parse(req.body.fields) : [];
                
                if (requestedFields.length === 0) {
                    return res.status(400).json({
                        success: false,
                        error: 'No se especificaron campos para extraer'
                    });
                }

                console.log('ü§ñ Iniciando extracci√≥n con IA para campos:', requestedFields);

                // Extraer texto del archivo
                let extractedText = '';
                const file = files[0];
                
                if (file.mimetype === 'application/pdf') {
                    // Para PDF, usar extracci√≥n mejorada con pdfjs-dist
                    try {
                        console.log('üìÑ Procesando archivo PDF con pdfjs-dist...');
                        console.log(`üìÑ Tama√±o del archivo: ${file.size} bytes`);
                        
                        extractedText = await extractTextFromPDF(file.buffer);
                        
                        console.log(`üìÑ Texto extra√≠do del PDF: ${extractedText.length} caracteres`);
                        
                        // Log detallado del texto extra√≠do para debugging
                        const sampleText = extractedText.substring(0, 2000);
                        console.log('üìÑ Muestra del texto extra√≠do (primeros 2000 chars):');
                        console.log('='.repeat(80));
                        console.log(sampleText);
                        console.log('='.repeat(80));
                        
                        // An√°lisis espec√≠fico de cantidades en el texto extra√≠do
                        console.log('üîç An√°lisis detallado de cantidades en el texto:');
                        
                        // Buscar patrones espec√≠ficos de cantidades
                        const undPattern = extractedText.match(/(\d+)\s+UND/gi);
                        const unidadesPattern = extractedText.match(/(\d+)\s+UNIDADES/gi);
                        const pcsPattern = extractedText.match(/(\d+)\s+PCS/gi);
                        const piezasPattern = extractedText.match(/(\d+)\s+PIEZAS/gi);
                        
                        console.log('üîç Cantidades con UND:', undPattern);
                        console.log('üîç Cantidades con UNIDADES:', unidadesPattern);
                        console.log('üîç Cantidades con PCS:', pcsPattern);
                        console.log('üîç Cantidades con PIEZAS:', piezasPattern);
                        
                        // Buscar n√∫meros de orden para contexto
                        const orderNumbers = extractedText.match(/CPOV-\d+/gi);
                        console.log('üîç N√∫meros de orden encontrados:', orderNumbers);
                        
                        // Buscar IDs de carga
                        const loadIds = extractedText.match(/CG-\d+/gi);
                        console.log('üîç IDs de carga encontrados:', loadIds);
                        
                        // An√°lisis de secciones espec√≠ficas si existen
                        if (extractedText.includes('CPOV-000009911')) {
                            console.log('üîç An√°lisis de secci√≥n problem√°tica CPOV-000009911:');
                            const beforeSection = extractedText.substring(0, extractedText.indexOf('CPOV-000009911'));
                            const afterSection = extractedText.substring(extractedText.indexOf('CPOV-000009911'));
                            
                            console.log('üìÑ Secci√≥n ANTES de CPOV-000009911 (√∫ltimos 500 chars):', beforeSection.substring(Math.max(0, beforeSection.length - 500)));
                            console.log('üìÑ Secci√≥n DESPU√âS de CPOV-000009911 (primeros 500 chars):', afterSection.substring(0, 500));
                            
                            // Buscar cantidades en cada secci√≥n
                            const beforeQuantities = beforeSection.match(/(\d+)\s+UND/gi);
                            const afterQuantities = afterSection.match(/(\d+)\s+UND/gi);
                            
                            console.log('üîç Cantidades ANTES de CPOV-000009911:', beforeQuantities);
                            console.log('üîç Cantidades DESPU√âS de CPOV-000009911:', afterQuantities);
                        }
                        
                        if (extractedText.length < 100) {
                            console.warn('‚ö†Ô∏è Texto extra√≠do muy corto, puede haber problemas con el PDF');
                        }
                        
                        // Verificar calidad del texto extra√≠do
                        const hasRelevantContent = extractedText.includes('CPOV') || extractedText.includes('CG-') || extractedText.includes('UND');
                        if (!hasRelevantContent) {
                            console.warn('‚ö†Ô∏è El texto extra√≠do no contiene contenido relevante esperado');
                        }
                        
                    } catch (pdfError) {
                        console.error('‚ùå Error extrayendo PDF:', pdfError.message);
                        console.error('‚ùå Stack trace:', pdfError.stack);
                        extractedText = 'PDF procesado - contenido no extra√≠ble';
                    }
                } else {
                    console.log('üìÑ Procesando archivo de texto...');
                    extractedText = file.buffer.toString('utf8');
                    console.log(`üìÑ Texto extra√≠do: ${extractedText.length} caracteres`);
                }

                        // Extraer datos con IA mejorada
        console.log('üîç Iniciando extracci√≥n con IA mejorada...');
        const extractedData = await extractWithAI(extractedText, requestedFields);
        console.log('üìä Datos extra√≠dos con IA:', extractedData.length, 'campos');

                if (extractedData.length === 0) {
                    console.error('‚ùå No se pudieron extraer datos del archivo');
                    return res.status(500).json({
                        success: false,
                        error: 'No se pudieron extraer datos del archivo'
                    });
                }

                // Log de los primeros datos para debugging
                console.log('üìã Primeros 3 datos extra√≠dos:', extractedData.slice(0, 3));
                
                // Log detallado de todos los datos extra√≠dos
                console.log('üìä Todos los datos extra√≠dos:');
                extractedData.forEach((item, index) => {
                    console.log(`${index + 1}. ${item.nombre || item.label}: "${item.valor || item.value}"`);
                });

                // Generar Excel
                console.log('üìä Generando archivo Excel...');
                const excelBuffer = generateExcel(extractedData);

                // Enviar respuesta
                console.log('üì§ Enviando archivo Excel...');
                res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
                res.setHeader('Content-Disposition', 'attachment; filename="datos_extraidos.xlsx"');
                res.send(excelBuffer);

            } catch (error) {
                console.error('‚ùå Error en la API:', error);
                res.status(500).json({
                    success: false,
                    error: error.message || 'Error interno del servidor'
                });
            }
        });

    } catch (error) {
        console.error('‚ùå Error general:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Error interno del servidor'
        });
    }
};
