const fs = require('fs');

// Simular los casos problem√°ticos mencionados
const problematicCases = [
    {
        name: "CPOV-000009605 - Deber√≠a ser 18 UND, pero viene como 1 UND",
        text: `CG-00014961 CPOV-000009605 TUBOS PVC SDR 21 6" X 19' CORVI-SONACA 18 UND CG-00014961 CPOV-000009795 TUBOS PVC SCH 40 3/4" X 19' CORVI-SONACA 400 UND`,
        expectedQuantity: "18"
    },
    {
        name: "CPOV-000009797 - Deber√≠a ser 160 UND, pero viene como 1160 UND",
        text: `CG-00014961 CPOV-000009797 TUBOS PVC SDR 41 2" X 19' CORVI-SONACA 160 UND CG-00014961 CPOV-000009866 TUBOS PVC SCH 40 1 1/2" X 19' CORVI-SONACA 1150 UND`,
        expectedQuantity: "160"
    },
    {
        name: "CPOV-000009866 - Deber√≠a ser 150 UND, pero viene como 1150 UND",
        text: `CG-00014961 CPOV-000009866 TUBOS PVC SCH 40 1 1/2" X 19' CORVI-SONACA 150 UND CG-00014961 CPOV-000009911 TUBOS PVC SDR 32.5 8" X 19'J/G CORVI-SONACA 3 UND`,
        expectedQuantity: "150"
    }
];

// Funci√≥n para simular el procesamiento l√≠nea por l√≠nea
function simulateLineProcessing(text) {
    console.log('üîç Simulando procesamiento l√≠nea por l√≠nea...');
    
    // Funci√≥n para reconstruir l√≠neas si el texto est√° fusionado
    function reconstructLines(text) {
        const lines = text.split(/\r?\n/).filter(line => line.trim().length > 0);
        
        // Si hay pocas l√≠neas, intentar reconstruir bas√°ndose en patrones
        if (lines.length < 5) {
            console.log('‚ö†Ô∏è Pocas l√≠neas detectadas, intentando reconstruir...');
            
            // Buscar patrones de inicio de l√≠nea
            const lineStartPattern = /(CG-\d+)/g;
            const matches = [...text.matchAll(lineStartPattern)];
            
            if (matches.length > 0) {
                const reconstructedLines = [];
                for (let i = 0; i < matches.length; i++) {
                    const startIndex = matches[i].index;
                    const endIndex = i < matches.length - 1 ? matches[i + 1].index : text.length;
                    const line = text.substring(startIndex, endIndex).trim();
                    
                    if (line.length > 10) {
                        reconstructedLines.push(line);
                    }
                }
                
                if (reconstructedLines.length > 0) {
                    console.log(`‚úÖ Reconstruidas ${reconstructedLines.length} l√≠neas`);
                    return reconstructedLines;
                }
            }
        }
        
        return lines;
    }
    
    // Procesar el texto l√≠nea por l√≠nea
    const lines = reconstructLines(text);
    console.log(`üìÑ Procesando ${lines.length} l√≠neas`);
    
    // Filtrar solo l√≠neas relevantes
    const relevantLines = lines.filter(line => 
        line.includes('TUBOS PVC') || 
        line.includes('CORVI-SONACA') || 
        line.includes('CPOV-') || 
        line.includes('CG-')
    );
    
    console.log(`üìÑ L√≠neas relevantes encontradas: ${relevantLines.length}`);
    
    // Simular el prompt que se enviar√≠a a Gemini
    const prompt = `Extrae los siguientes campos del documento, procesando CADA L√çNEA POR SEPARADO:

- ID de carga (formato: CG-XXXXXXX)
- N√∫mero de orden (formato: CPOV-XXXXXXXXX)
- Nombre de art√≠culo (debe contener "TUBOS PVC" y "CORVI-SONACA")
- Cantidad (solo n√∫meros que est√©n en la MISMA L√çNEA que el art√≠culo, seguidos de "UND")

IMPORTANTE:
1. Procesa cada l√≠nea individualmente
2. La cantidad debe estar en la MISMA L√çNEA que el nombre del art√≠culo
3. NO mezcles cantidades de l√≠neas diferentes
4. Solo considera cantidades que est√©n claramente asociadas al art√≠culo en esa l√≠nea espec√≠fica
5. Si una l√≠nea no tiene cantidad clara, om√≠tela

Documento (cada l√≠nea separada):
${relevantLines.map((line, index) => `L√≠nea ${index + 1}: ${line}`).join('\n')}

Responde SOLO con un JSON en este formato:
{"campos": [{"nombre": "campo", "valor": "valor", "linea": numero_linea}]}`;

    console.log('\nüìù Prompt que se enviar√≠a a Gemini:');
    console.log('='.repeat(80));
    console.log(prompt);
    console.log('='.repeat(80));
    
    return {
        lines: relevantLines,
        prompt: prompt,
        totalLines: relevantLines.length
    };
}

// Funci√≥n para simular la validaci√≥n de campos
function simulateFieldValidation(fields, relevantLines) {
    console.log('\nüîç Simulando validaci√≥n de campos...');
    
    const validatedFields = [];
    const seenCombinations = new Set();
    
    fields.forEach(field => {
        const fieldName = field.nombre || field.label || '';
        const fieldValue = field.valor || field.value || '';
        const lineNumber = field.linea || field.line || 0;
        
        // Validar que el campo tenga valor
        if (!fieldValue || fieldValue.trim() === '') {
            console.log(`‚ö†Ô∏è Campo vac√≠o ignorado: ${fieldName}`);
            return;
        }
        
        // Para cantidades, aplicar validaciones adicionales
        if (fieldName.toLowerCase().includes('cantidad')) {
            const numericMatch = fieldValue.match(/(\d+)/);
            if (!numericMatch) {
                console.log(`‚ö†Ô∏è Cantidad inv√°lida ignorada: ${fieldValue}`);
                return;
            }
            
            const numericValue = parseInt(numericMatch[1]);
            
            // Validar que la cantidad sea razonable
            if (numericValue <= 0 || numericValue > 99999) {
                console.log(`‚ö†Ô∏è Cantidad fuera de rango ignorada: ${fieldValue}`);
                return;
            }
            
            // Verificar que no sea parte de un n√∫mero de orden
            if (numericValue > 500) {
                const originalLine = relevantLines[lineNumber - 1] || '';
                if (originalLine.includes('CPOV-')) {
                    const orderMatch = originalLine.match(/CPOV-(\d+)/);
                    if (orderMatch && orderMatch[1].includes(numericValue.toString())) {
                        console.log(`‚ö†Ô∏è Cantidad parece ser n√∫mero de orden ignorada: ${fieldValue}`);
                        return;
                    }
                }
            }
        }
        
        // Evitar duplicados bas√°ndose en nombre y valor
        const combination = `${fieldName}:${fieldValue}`;
        if (seenCombinations.has(combination)) {
            console.log(`‚ö†Ô∏è Campo duplicado ignorado: ${fieldName} = ${fieldValue}`);
            return;
        }
        seenCombinations.add(combination);
        
        validatedFields.push({
            nombre: fieldName,
            valor: fieldValue,
            linea: lineNumber
        });
        
        console.log(`‚úÖ Campo validado: ${fieldName} = ${fieldValue} (l√≠nea ${lineNumber})`);
    });
    
    console.log(`üìä Total de campos validados: ${validatedFields.length}`);
    return validatedFields;
}

// Funci√≥n para simular la extracci√≥n manual como fallback
function simulateManualExtraction(text) {
    console.log('\nüîç Simulando extracci√≥n manual como fallback...');
    
    const results = [];
    const foundQuantities = new Set();
    
    // Procesar el texto l√≠nea por l√≠nea
    const lines = text.split(/\r?\n/).filter(line => line.trim().length > 0);
    
    // Si hay pocas l√≠neas, intentar reconstruir
    if (lines.length < 5) {
        const lineStartPattern = /(CG-\d+)/g;
        const matches = [...text.matchAll(lineStartPattern)];
        
        if (matches.length > 0) {
            const reconstructedLines = [];
            for (let i = 0; i < matches.length; i++) {
                const startIndex = matches[i].index;
                const endIndex = i < matches.length - 1 ? matches[i + 1].index : text.length;
                const line = text.substring(startIndex, endIndex).trim();
                
                if (line.length > 10) {
                    reconstructedLines.push(line);
                }
            }
            
            if (reconstructedLines.length > 0) {
                lines.length = 0;
                lines.push(...reconstructedLines);
            }
        }
    }
    
    // Patr√≥n espec√≠fico para cantidades con word boundaries
    const quantityPattern = /\b(\d{1,4})\s*UND\b/gi;
    
    lines.forEach((line, lineIndex) => {
        if (line.includes('TUBOS PVC') || line.includes('CORVI-SONACA')) {
            console.log(`üîç Procesando l√≠nea ${lineIndex + 1}: "${line}"`);
            
            const matches = line.match(quantityPattern);
            if (matches) {
                console.log(`‚úÖ L√≠nea ${lineIndex + 1} - Cantidades encontradas:`, matches);
                
                matches.forEach(match => {
                    const numericMatch = match.match(/(\d+)/);
                    if (numericMatch) {
                        const quantity = numericMatch[1];
                        const numericValue = parseInt(quantity);
                        
                        // Validaci√≥n cruzada
                        if (numericValue > 500) {
                            if (line.includes('CPOV-')) {
                                const orderMatch = line.match(/CPOV-(\d+)/);
                                if (orderMatch && orderMatch[1].includes(quantity)) {
                                    console.log(`‚ö†Ô∏è Cantidad rechazada (parece ser n√∫mero de orden): "${quantity}" en l√≠nea ${lineIndex + 1}`);
                                    return;
                                }
                            }
                        }
                        
                        if (!foundQuantities.has(quantity)) {
                            foundQuantities.add(quantity);
                            results.push({ 
                                nombre: 'Cantidad', 
                                valor: quantity,
                                linea: lineIndex + 1
                            });
                            console.log(`‚úÖ Cantidad agregada: "${quantity}" (l√≠nea ${lineIndex + 1})`);
                        }
                    }
                });
            }
        }
    });
    
    return results;
}

function testProblematicCases() {
    console.log('üß™ Probando casos problem√°ticos espec√≠ficos...\n');
    
    problematicCases.forEach((testCase, index) => {
        console.log(`\n${'='.repeat(80)}`);
        console.log(`CASO ${index + 1}: ${testCase.name}`);
        console.log(`${'='.repeat(80)}`);
        
        console.log(`üìÑ Texto de entrada: "${testCase.text}"`);
        console.log(`üéØ Cantidad esperada: ${testCase.expectedQuantity}`);
        
        // Simular procesamiento l√≠nea por l√≠nea
        const lineProcessing = simulateLineProcessing(testCase.text);
        
        // Simular extracci√≥n manual
        const manualResults = simulateManualExtraction(testCase.text);
        
        // Buscar la cantidad extra√≠da
        const extractedQuantity = manualResults.find(r => r.nombre === 'Cantidad');
        
        if (extractedQuantity) {
            console.log(`\nüìä RESULTADO:`);
            console.log(`‚úÖ Cantidad extra√≠da: ${extractedQuantity.valor}`);
            console.log(`üéØ Cantidad esperada: ${testCase.expectedQuantity}`);
            
            if (extractedQuantity.valor === testCase.expectedQuantity) {
                console.log(`‚úÖ √âXITO: Cantidad correcta`);
            } else {
                console.log(`‚ùå ERROR: Cantidad incorrecta`);
                console.log(`üîç An√°lisis de la l√≠nea: "${lineProcessing.lines[extractedQuantity.linea - 1]}"`);
            }
        } else {
            console.log(`\n‚ùå ERROR: No se encontr√≥ cantidad`);
        }
        
        console.log(`\nüìã L√≠neas procesadas:`);
        lineProcessing.lines.forEach((line, lineIndex) => {
            console.log(`${lineIndex + 1}. ${line}`);
        });
    });
    
    console.log(`\n${'='.repeat(80)}`);
    console.log('üìä RESUMEN DE RESULTADOS');
    console.log(`${'='.repeat(80)}`);
    
    let successCount = 0;
    problematicCases.forEach((testCase, index) => {
        const manualResults = simulateManualExtraction(testCase.text);
        const extractedQuantity = manualResults.find(r => r.nombre === 'Cantidad');
        
        if (extractedQuantity && extractedQuantity.valor === testCase.expectedQuantity) {
            successCount++;
            console.log(`‚úÖ Caso ${index + 1}: √âXITO`);
        } else {
            console.log(`‚ùå Caso ${index + 1}: FALLO`);
        }
    });
    
    const successRate = (successCount / problematicCases.length * 100).toFixed(1);
    console.log(`\nüìä Tasa de √©xito: ${successRate}% (${successCount}/${problematicCases.length})`);
}

// Ejecutar si se llama directamente
if (require.main === module) {
    testProblematicCases();
}

module.exports = { 
    simulateLineProcessing, 
    simulateFieldValidation, 
    simulateManualExtraction, 
    testProblematicCases 
};
